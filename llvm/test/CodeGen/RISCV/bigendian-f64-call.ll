; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -target-abi=ilp32 -mattr=+d -verify-machineinstrs < %s | FileCheck -check-prefix=RV32LE %s
; RUN: llc -mtriple=riscv32be -target-abi=ilp32 -mattr=+d -verify-machineinstrs < %s | FileCheck -check-prefix=RV32BE %s

; Test f64 function calls with D extension and soft-float ABI
; This specifically tests the LowerCall path that needs to swap Lo/Hi for BE

declare double @external_func(double, double)

define double @test_f64_call(double %a, double %b) {
; RV32LE-LABEL: test_f64_call:
; RV32LE:       # %bb.0:
; RV32LE-NEXT:    addi sp, sp, -16
; RV32LE-NEXT:    .cfi_def_cfa_offset 16
; RV32LE-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; RV32LE-NEXT:    .cfi_offset ra, -4
; RV32LE-NEXT:    call external_func
; RV32LE-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; RV32LE-NEXT:    .cfi_restore ra
; RV32LE-NEXT:    addi sp, sp, 16
; RV32LE-NEXT:    .cfi_def_cfa_offset 0
; RV32LE-NEXT:    ret
;
; RV32BE-LABEL: test_f64_call:
; RV32BE:       # %bb.0:
; RV32BE-NEXT:    addi sp, sp, -16
; RV32BE-NEXT:    .cfi_def_cfa_offset 16
; RV32BE-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; RV32BE-NEXT:    .cfi_offset ra, -4
; RV32BE-NEXT:    call external_func
; RV32BE-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; RV32BE-NEXT:    .cfi_restore ra
; RV32BE-NEXT:    addi sp, sp, 16
; RV32BE-NEXT:    .cfi_def_cfa_offset 0
; RV32BE-NEXT:    ret
  %result = call double @external_func(double %a, double %b)
  ret double %result
}

; Test with a computation before the call to force SplitF64
define double @test_f64_call_with_fadd(double %a, double %b) {
; RV32LE-LABEL: test_f64_call_with_fadd:
; RV32LE:       # %bb.0:
; RV32LE-NEXT:    addi sp, sp, -16
; RV32LE-NEXT:    .cfi_def_cfa_offset 16
; RV32LE-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; RV32LE-NEXT:    .cfi_offset ra, -4
; RV32LE-NEXT:    sw a2, 0(sp)
; RV32LE-NEXT:    sw a3, 4(sp)
; RV32LE-NEXT:    fld fa5, 0(sp)
; RV32LE-NEXT:    sw a0, 0(sp)
; RV32LE-NEXT:    sw a1, 4(sp)
; RV32LE-NEXT:    fld fa4, 0(sp)
; RV32LE-NEXT:    fadd.d fa5, fa4, fa5
; RV32LE-NEXT:    fsd fa5, 0(sp)
; RV32LE-NEXT:    lw a0, 0(sp)
; RV32LE-NEXT:    lw a1, 4(sp)
; RV32LE-NEXT:    mv a2, a0
; RV32LE-NEXT:    mv a3, a1
; RV32LE-NEXT:    call external_func
; RV32LE-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; RV32LE-NEXT:    .cfi_restore ra
; RV32LE-NEXT:    addi sp, sp, 16
; RV32LE-NEXT:    .cfi_def_cfa_offset 0
; RV32LE-NEXT:    ret
;
; RV32BE-LABEL: test_f64_call_with_fadd:
; RV32BE:       # %bb.0:
; RV32BE-NEXT:    addi sp, sp, -16
; RV32BE-NEXT:    .cfi_def_cfa_offset 16
; RV32BE-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; RV32BE-NEXT:    .cfi_offset ra, -4
; RV32BE-NEXT:    sw a2, 0(sp)
; RV32BE-NEXT:    sw a3, 4(sp)
; RV32BE-NEXT:    fld fa5, 0(sp)
; RV32BE-NEXT:    sw a0, 0(sp)
; RV32BE-NEXT:    sw a1, 4(sp)
; RV32BE-NEXT:    fld fa4, 0(sp)
; RV32BE-NEXT:    fadd.d fa5, fa4, fa5
; RV32BE-NEXT:    fsd fa5, 0(sp)
; RV32BE-NEXT:    lw a0, 0(sp)
; RV32BE-NEXT:    lw a1, 4(sp)
; RV32BE-NEXT:    mv a2, a0
; RV32BE-NEXT:    mv a3, a1
; RV32BE-NEXT:    call external_func
; RV32BE-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; RV32BE-NEXT:    .cfi_restore ra
; RV32BE-NEXT:    addi sp, sp, 16
; RV32BE-NEXT:    .cfi_def_cfa_offset 0
; RV32BE-NEXT:    ret
  %sum = fadd double %a, %b
  %result = call double @external_func(double %sum, double %sum)
  ret double %result
}
